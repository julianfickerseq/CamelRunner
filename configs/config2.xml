<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" 
	xmlns:ns2="null" 
	xmlns:ns3="null" 
	xmlns:jolokia="http://www.jolokia.org/jolokia-spring/schema/config"
	xsi:schemaLocation="        
	http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd       
	http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd     
	http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd 			
	http://www.jolokia.org/jolokia-spring/schema/config 
	http://www.jolokia.org/jolokia-spring/schema/config/jolokia-config.xsd">
	<!-- the camel context -->
	
	<camelContext xmlns="http://camel.apache.org/schema/spring" id="camel" autoStartup="true">
		<jmxAgent id="agent" createConnector="true" registryPort="1399"/>
		<dataFormats>
			<json id="jack" library="Jackson"/>
		</dataFormats>

		
		<route id="ReadStocks">
		            <from uri="timer://camelstatus?fixedRate=true&amp;period=5000"/>
					<setHeader headerName="CamelHttpMethod">
					    <constant>GET</constant>
					</setHeader>	
					<to uri="http4://finance.yahoo.com/webservice/v1/symbols/AAPL/quote?format=json&amp;view=detail"/>

					<convertBodyTo type="java.lang.String"/>
					<setBody>
						<javaScript>
							var res=JSON.parse(request.body);
							res.priceasfloat=parseFloat(res.list.resources[0].resource.fields.price);
							JSON.stringify(res);
						</javaScript>
					</setBody>
					<to uri="log:COUCOUCOU"/>	
					<setHeader headerName="CamelHttpMethod">
					    <constant>POST</constant>
					</setHeader>						
					<recipientList>
						<simple>http4://localhost:9200/stocks/stock</simple>
					</recipientList>				
		</route>

		<!--================= Read SQL ==================-->
		<route id="importanddeletesql">
			<from uri="jms:topic:IMPORT_SQL?clientId=ImportSQL"/>
			<log message="Import SQL to index ${headers.IndexName} Recreate:${headers.CreateIndex} SQL:${body}"/>
			<setHeader headerName="Notification">
				<simple>Job Added (SQL)</simple>
			</setHeader>
			<to uri="jms:topic:STARTNOTIFICATION"/>       			
			
			<to uri="jdbc:DataSourcePGAdmin"/>
			<to uri="bean:sqlmappingextractor"/>			
			
			<setHeader headerName="IndexType">
				<simple>fromsql</simple>
			</setHeader>		
			<setHeader headerName="IndexName">
				<javaScript>
					var indexname=''+request.headers.get('IndexName');
					
					if(indexname==null || indexname =='null' || indexname.length==0)
						indexname='dummy';
					else
						indexname=indexname.toLowerCase()
						
					indexname;
				</javaScript>
			</setHeader>
			
			<to uri="direct:processdata"/>
		</route>
		

		<!--================= Read XLS ==================-->
		<route id="readxlsanddelete">			
			<from uri="file:/Users/snuids/Desktop/ImportAndDeleteXLS?delete=true"/>
			<log message="(${date:now:HH:mm:ss}) Importing (Delete) XLS"/>
			<setHeader headerName="Notification">
				<simple>Job Added (Read XLS And Delete)</simple>
			</setHeader>
			<to uri="jms:topic:STARTNOTIFICATION"/>      			
			
			<unmarshal>
			    <custom ref="excel" />
			</unmarshal>
			<setHeader headerName="CreateIndex">
				<simple>true</simple>
			</setHeader>
			<setHeader headerName="IndexType">
				<simple>fromxls</simple>
			</setHeader>
			<setHeader headerName="IndexName">
				<javaScript>
					var filename=''+request.headers.get('CamelFileNameOnly');
					var cols=filename.toLowerCase().replace(/ /g,'').split('\.');
					filename=cols[0];
					filename;
				</javaScript>
			</setHeader>
			<to uri="direct:processdata"/>					
		</route>
		
		<!--================= Read XLS (Update) ==================-->
		<route id="readxlsandupdate">			
			<from uri="file:/Users/snuids/Desktop/ImportXLS?delete=true"/>
			<log message="(${date:now:HH:mm:ss}) Importing XLS"/>  
			<setHeader headerName="Notification">
				<simple>Job Added (Read XLS)</simple>
			</setHeader>
			<to uri="jms:topic:STARTNOTIFICATION"/>       			
			
			<unmarshal>
			    <custom ref="excel" />
			</unmarshal>
			<setHeader headerName="CreateIndex">
				<simple>false</simple>
			</setHeader>
			<setHeader headerName="IndexType">
				<simple>fromxls</simple>
			</setHeader>
			<setHeader headerName="IndexName">
				<javaScript>
					var filename=''+request.headers.get('CamelFileNameOnly');
					var cols=filename.toLowerCase().replace(' ','').split('\.');
					filename=cols[0];
					filename;
				</javaScript>
			</setHeader>
			<to uri="direct:processdata"/>					
		</route>
		
		<!--================= Process Data ===================-->
		<route id="processdata">
			<from uri="direct:processdata"/>
			<to uri="bean:jsHelper"/> 			
			<setBody>
				<javaScript>
					var helper = request.headers.get('jsHelper');
					helper.cache(request.headers.get('IndexName'),request.headers.get('xlsdata'));
					var res='';
					res;
				</javaScript>
			</setBody>
			
			<setBody>
				<simple>Job Added for Index:${headers.IndexName} Type:${headers.IndexType} Data Size:${headers.xlsdata.size}</simple>
			</setBody>
			<to uri="jms:topic:JOB_NOTIFICATION"/>
			
			<removeHeaders pattern="xlsdata" />
			<filter>
				<simple>${headers.CreateIndex}</simple>
				<setBody>
					<constant></constant>
				</setBody>
				<doTry>
					<setHeader headerName="CamelHttpMethod">
					        <constant>DELETE</constant>
					</setHeader>						
					<recipientList>
						<simple>http4://localhost:9200/${headers.IndexName}/</simple>
					</recipientList>
					<log message="Index ${headers.IndexName} Deleted"/>
					<doCatch>				
						<exception>java.lang.Exception</exception>            
						<log message="Unable to drop Index."/>
					</doCatch>      
				</doTry>
				<setBody>
					<simple>${headers.mappings}</simple>
				</setBody>			
				<marshal ref="jack"/>	
				<convertBodyTo type="java.lang.String"/>
				<setBody>
					<javaScript>
						var res=''+request.body;
						var maps=JSON.parse(res);
						var fres={"settings" : {"number_of_shards" : 5}};
						fres.mappings={};
						fres.mappings[headers.get('IndexType')]={"properties":maps}
						var fresstr=JSON.stringify(fres);
						fresstr;
					</javaScript>
				</setBody>
				<log message="Mappings ${body} "/>      
				<setHeader headerName="CamelHttpMethod">
				    <constant>POST</constant>
				</setHeader>						
				<recipientList>
					<simple>http4://localhost:9200/${headers.IndexName}/</simple>
				</recipientList>
				<log message="Index ${headers.IndexName} Created"/>      
			</filter>
			
			<to uri="bean:jsHelper"/>
			<setBody>
				<javaScript>
					var helper = request.headers.get('jsHelper');
					var res=helper.cache(request.headers.get('IndexName'));
					request.setHeader('xlsdata',res);
				</javaScript>
			</setBody>
			
			<to uri="direct:processdata2"/>
		</route>

		<!--================= Process Data 2 ===================-->
		<route id="processdata2">
			<from uri="direct:processdata2"/>
			<log message="=========  Processing Data"/>
			<setBody>
				<simple>${headers.xlsdata}</simple>
			</setBody>
			<removeHeaders pattern="xlsdata" />
			<marshal ref="jack"/>	
			<convertBodyTo type="java.lang.String" charset="UTF-8"/>
			<setBody>
				<javaScript>
					var rows=''+request.body;
					rows=JSON.parse(rows);
					var results=new java.util.ArrayList();
					var i;
					var cursize=0;
					var curmes='';
					for(i=0;i &lt; rows.length;i++)
					{
						var row=rows[i];
						var mes=''+JSON.stringify(row);
						
						var res="{ \"index\" : { \"_index\" : \""+request.headers.get('IndexName')
								+"\", \"_type\" : \""+request.headers.get('IndexType');
						if(row.elkey!=null &amp;&amp; row.elkey!='' &amp;&amp; row.elkey!='null')
							res=res+"\", \"_id\" : \""+row.elkey+"\" } }";
						else
							res=res+"\"}}"
						res=res+"\n"+mes+"\n";
						
						curmes=curmes+res;
						cursize++;
						if(cursize>99)
						{
							results.add(curmes);
							curmes='';
							cursize=0;
						}
					}
					results.add(curmes);
					results;
				</javaScript>
			</setBody>
			<split>
				<simple>${body}</simple>
				<log message="=========  Bulk Ready "/>
				<to uri="direct:aggregate2"/>
			</split>
			<setBody>
				<simple>Job Finished for Index:${headers.IndexName} Type:${headers.IndexType}</simple>
			</setBody>
			<to uri="jms:topic:JOB_NOTIFICATION"/>
			<log message="Batch finished..."/>
		</route>
		
		
		
		<!--================= Aggregate 2 ==================-->
		<route>
			<from uri="direct:aggregate2"/>
			<setHeader headerName="CamelHttpMethod">
			    <constant>POST</constant>
			</setHeader>
			<doTry>
				<log message="Time:${date:now:HH:mm:ss} Post dest:http4://localhost:9200/_bulk"/>												
				<recipientList>
					<simple>http4://localhost:9200/_bulk</simple>
				</recipientList>
				<log message="Time:${date:now:HH:mm:ss} Bulk insert done."/>          				
				<doCatch>				
					<exception>java.lang.Exception</exception>            
					<log message="Unable to add data."/>
					<to uri="log:COUCOU?showAll=true"/>
				</doCatch>					
			</doTry>
		</route>
		
		<!--================= Notification ==================-->
		<route id="startnotification">
			<from uri="jms:topic:STARTNOTIFICATION?clientId=NotificationListener"/>
			<setBody>
				<simple>${headers.Notification}</simple>
			</setBody>
			<to uri="jms:topic:JOB_NOTIFICATION"/>
		</route>
		
		
		<!--================= Process Data 2 ===================-->
		<!--route id="processdata2a">
			<from uri="jms:queue:processdata2"/>
			<setBody>
				<simple>${headers.xlsdata}</simple>
			</setBody>
			<split>
				<simple>${body}</simple>
				<removeHeaders pattern="xlsdata" />
				<marshal ref="jack"/>	
				<convertBodyTo type="java.lang.String" charset="UTF-8"/>
				<setBody>
					<javaScript>
						var res=''+request.body;
						var data=JSON.parse(res);
						var fresstr=JSON.stringify(data);
						var elkey='';
						if((data.elkey!=null)
							&amp;&amp;(data.elkey!=undefined))
							elkey=data.elkey;
						request.headers.put('IndexPkey',elkey);
						fresstr;
					</javaScript>
				</setBody>
				<convertBodyTo type="java.lang.String" charset="UTF-8"/>
				<log message="To aggregator"/>
				<to uri="direct:aggregatejob"/>
				<setHeader headerName="CamelHttpMethod">
				    <constant>POST</constant>
				</setHeader>
				<doTry>
					<log message="Post dest:http4://localhost:9200/${headers.IndexName}/${headers.IndexType}/${headers.IndexPKey}"/>												
					<recipientList>
						<simple>http4://localhost:9200/${headers.IndexName}/${headers.IndexType}/${headers.IndexPKey}</simple>
					</recipientList>
					<log message="Data added to index ${headers.IndexName}/${headers.IndexType}"/>          				
					<doCatch>				
						<exception>java.lang.Exception</exception>            
						<log message="Unable to add data."/>
						<to uri="log:COUCOU?showAll=true"/>
					</doCatch>					
				</doTry>
			</split>
			<setBody>
				<simple>Job Finished for Index:${headers.IndexName} Type:${headers.IndexType} Time:${date:now:HH:mm:ss} Data Size:${headers.xlsdata.size}</simple>
			</setBody>
			<to uri="jms:topic:JOB_NOTIFICATION"/>
			<log message="Batch finished..."/>
		</route-->

		<!--================= Aggregate 1 ==================-->
		<!--route id="aggregatejob">		
			<from uri="direct:aggregatejob"/>
			<setBody>
				<javaScript>
					var mes=''+request.body;
					var res="{ \"index\" : { \"_index\" : \""+request.headers.get('IndexName')
							+"\", \"_type\" : \""+request.headers.get('IndexType');
					if(request.headers.get('IndexPKey')!=null &amp;&amp; request.headers.get('IndexPKey')!='')
						res=res+"\", \"_id\" : \""+request.headers.get('IndexPKey')+"\" } }";
					else
						res=res+"\"}}"
					res=res+"\n"+mes+"\n";
				</javaScript>
			</setBody>
			
			
			<aggregate strategyRef="aggregatorStrategy" completionTimeout="2000">
	            <correlationExpression>
	                <header>IndexName</header>
	            </correlationExpression>
	            <completionSize>
	                <constant>200</constant>
	            </completionSize>
				<log message="Bulk done."/>
				<to uri="jms:queue:JOB_BATCH"/>
				<to uri="direct:aggregate2"/>
			</aggregate>			
		</route-->
		
	</camelContext>
	
	<!--================= JMS ===================-->			
	<bean id="jms" class="org.apache.activemq.camel.component.ActiveMQComponent">
		<property name="brokerURL" value="tcp://127.0.0.1:61616"/>
	</bean>
	
	<!--================= HSHelper ===================-->
	<bean id="jsHelper" class="helpers.JSHelper.JSHelper">
	</bean>
	
	<!--================= Excel ===================-->
	<bean id="excel" class="helpers.Excel.ExcelDataFormat">
		<property name="importType" value="FORMATTED"/>
	</bean>
	
	<!--================= SQL ===================-->
	<bean id="sqlmappingextractor" class="helpers.SQL.SQLMappingExtractor">
	</bean>
	
	<!--================= Datasource ===================-->
	<bean id="DataSourcePGAdmin" class="org.apache.commons.dbcp.BasicDataSource"
	          destroy-method="close">
	        <property name="driverClassName" value="org.postgresql.Driver" />
	        <property name="url" value="jdbc:postgresql://127.0.0.1:5432/fascan" />
	        <property name="username" value="fascan" />
	        <property name="password" value="fascan" />
	        <property name="timeBetweenEvictionRunsMillis" value="300000" />
	        <property name="numTestsPerEvictionRun" value="6" />
	        <property name="minEvictableIdleTimeMillis" value="1800000" />
	        <property name="initialSize" value="3" />
	        <property name="maxActive" value="10" />
	        <property name="maxIdle" value="10" />
	        <property name="maxWait" value="5000" />
	        <property name="poolPreparedStatements" value="true" />
	        <property name="maxOpenPreparedStatements" value="100" />
	</bean>

	<!--================= Aggregators ===================-->	
	<bean id="aggregatorStrategy" class="helpers.Aggregators.BodyAsStringAggregator"/>
	
	<!--================= Jolokia ===================-->
	<jolokia:agent lookupConfig="false" systemPropertiesMode="never">
	    <jolokia:config
	            autoStart="true"
	            host="0.0.0.0"
	            port="8778"
	            />
	</jolokia:agent>
</beans>
